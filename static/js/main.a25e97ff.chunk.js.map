{"version":3,"sources":["Button.js","FlagOptions.js","FlagAnswer.js","Flag.js","GeographyQuestion.js","CountryGame.js","App.js","serviceWorker.js","index.js"],"names":["Button","text","onButtonClick","type","onClick","FlagOptions","options","userChoice","onAnswerChange","handleClick","e","target","tagName","previousSibling","value","map","country","i","className","key","id","onChange","checked","htmlFor","name","FlagAnswer","correctAnswer","message","correct","style","color","Flag","src","this","props","flagUrl","alt","Component","GeographyQuestion","status","gameStatus","UNDECIDED","WINNER","flag","LOST","CountryGame","handleButtonClick","state","isWinner","setState","startGame","handleAnswerChange","val","Number","COUNTRY_DATA","undefined","populateCountries","then","catch","err","console","log","getDistinctRandomNumbers","length","Math","floor","random","elementsWanted","elements","includes","push","url","fetchArrOfObjectsFrom","countriesJSON","fetch","res","json","data","countries","index","correctCountry","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a25e97ff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nconst Button = ({ text, onButtonClick, type }) => {\n  // note optionsla prop 'type'\n  return (\n    <button type={type || 'button'} onClick={onButtonClick}>\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onButtonClick: PropTypes.func.isRequired\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FlagOptions.css';\n\nexport default function FlagOptions({ options, userChoice, onAnswerChange }) {\n\n\nconst handleClick = (e) => {\n  let userChoice =  e.target.tagName === \"LABEL\" ? e.target.previousSibling.value : e.target.value;\n  onAnswerChange(userChoice);\n}\n\n  options =\n    options &&\n    options.map((country, i) => (\n      <span className=\"option\"  key={country.id}>\n        <input\n          type=\"radio\"\n          id={country.id}\n          value={country.id}\n          onChange={handleClick}\n          checked={userChoice === country.id ? true : false}\n        />\n        <label htmlFor={country.name} onClick={handleClick}>{country.name}</label>\n      </span>\n    ));\n\n  return <div id=\"options\">{options}</div>;\n}\n\nFlagOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  userChoice: PropTypes.number.isRequired,\n  onAnswerChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n                                       // props\nexport default function FlagAnswer({ correctAnswer, correct }) {\n  const message = correct ? (\n    <p>\n      <span style={{ color: 'green' }}>Correct!</span> {correctAnswer.name}\n    </p>\n  ) : (\n    <p>\n      <span style={{ color: 'red' }}>Incorrect.</span> Correct answer:{' '}\n      {correctAnswer.name}\n    </p>\n  );\n\n  return <div id=\"options\">{message}</div>;\n}\n\nFlagAnswer.propTypes = {\n  correct: PropTypes.bool.isRequired,\n  correctAnswer: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport './Flag.css'\n\nimport PropTypes from 'prop-types';\n\nexport default class Flag extends Component {\n  static propTypes = {\n    flagUrl: PropTypes.string.isRequired\n  };\n\n  render() {\n    return (\n      <div>\n        <img src={this.props.flagUrl} alt=\"flag\" />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport FlagOptions from './FlagOptions';\nimport FlagAnswer from './FlagAnswer';\nimport Flag from './Flag';\nimport { gameStatus } from './CountryGame';\n\nexport default function GeographyQuestion({\n  status,\n  options,\n  correctAnswer,\n  userChoice,\n  onAnswerChange,\n  onButtonClick\n}) {\n  return (\n    <div>\n      {status === gameStatus.UNDECIDED ? (\n        <FlagOptions\n          options={options}\n          userChoice={userChoice}\n          onAnswerChange={onAnswerChange}\n        />\n      ) : (\n        <FlagAnswer\n          correct={status === gameStatus.WINNER}\n          correctAnswer={correctAnswer}\n        />\n      )}\n\n      <Button\n        onButtonClick={onButtonClick}\n        text={status === gameStatus.UNDECIDED ? 'Check' : 'Next'}\n      />\n      <Flag flagUrl={correctAnswer.flag} />\n    </div>\n  );\n}\n\nGeographyQuestion.propTypes = {\n  status: PropTypes.number.isRequired,\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  correctAnswer: PropTypes.object.isRequired,\n  userChoice: PropTypes.number.isRequired,\n  onAnswerChange: PropTypes.func.isRequired,\n  onButtonClick: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport GeographyQuestion from './GeographyQuestion';\n\nconst NO_OF_OPTIONS = 4;\nexport const gameStatus = {\n  UNDECIDED: 0,\n  WINNER: 1,\n  LOST: 2\n};\n\nconst API_URL = 'https://restcountries.eu/rest/v2/all?fields=name;capital;flag';\n\nexport default class CountryGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      COUNTRY_DATA: [],\n      options: [],\n      correctAnswer: undefined,\n      status: gameStatus.UNDECIDED,\n      userChoice: -1\n    };\n  }\n\n  componentDidMount() {\n    this.populateCountries(API_URL)\n      .then(() => {\n        this.startGame();\n      })\n      .catch(err => {\n        console.log('Error initializing game: ' + err);\n      });\n  }\n\n  startGame() {\n    let options = this.getDistinctRandomNumbers(\n      NO_OF_OPTIONS,\n      this.state.COUNTRY_DATA.length\n    );\n\n    const random = Math.floor(Math.random() * NO_OF_OPTIONS);\n    const correctAnswer = options[random];\n\n    this.setState({\n      options,\n      correctAnswer,\n      userChoice: -1,\n      status: gameStatus.UNDECIDED\n    });\n  }\n\n  handleButtonClick = e => {\n    if (this.state.status === gameStatus.UNDECIDED) {\n      if (this.state.userChoice === -1) {\n        return;\n      }\n\n      let isWinner =\n        this.state.userChoice === this.state.correctAnswer ? true : false;\n\n      this.setState({\n        status: isWinner ? gameStatus.WINNER : gameStatus.LOST\n      });\n    } else {\n      this.startGame();\n    }\n  };\n\n  handleAnswerChange = val => {\n    this.setState({\n      userChoice: Number(val)\n    });\n  };\n\n  getDistinctRandomNumbers(elementsWanted, options) {\n    let elements = [];\n    while (elements.length < elementsWanted) {\n      const random = Math.floor(Math.random() * options);\n      if (!elements.includes(random)) {\n        elements.push(random);\n      }\n    }\n    return elements;\n  }\n\n  populateCountries(url) {\n    return this.fetchArrOfObjectsFrom(url)\n      .then(countriesJSON => {\n        this.setState({ COUNTRY_DATA: countriesJSON }, () => {\n          /*  console.log(); */\n        });\n      })\n      .catch(err => {\n        console.log('Error populating countries ' + err);\n      });\n  }\n\n  fetchArrOfObjectsFrom(url) {\n    return fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        return data.length > 0 ? data : [];\n      })\n      .catch(err => console.log('Error fetching data ' + err));\n  }\n\n  render() {\n    const { options, status, correctAnswer, userChoice } = this.state;\n\n    // turn indexes into country objects\n    const countries = options.map(index => {\n      return { id: index, ...this.state.COUNTRY_DATA[index] };\n    });\n\n    const correctCountry = this.state.COUNTRY_DATA[correctAnswer];\n\n    // note below\n    if (correctAnswer === undefined) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <GeographyQuestion\n          options={countries}\n          status={status}\n          correctAnswer={correctCountry}\n          userChoice={userChoice}\n          onAnswerChange={this.handleAnswerChange}\n          onButtonClick={this.handleButtonClick}\n        />\n      );\n    }\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport CountryGame from './CountryGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header id=\"div-with-bg\">\n        <h1>Flag Freak</h1>\n      </header>\n      <main>\n        <CountryGame />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}